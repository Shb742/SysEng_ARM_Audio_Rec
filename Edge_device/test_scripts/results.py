import matplotlib.pyplot as plt
import numpy as np


def ROC_PRC(ppv_points,tpr_points,fpr_points,title):
	# This is the AUC
	auc = abs(np.trapz(tpr_points,fpr_points))
	print("Area Under Curve - "+str(auc))
	plt.figure(title)
	# This is the ROC curve
	plt.subplot(211)
	plt.title("ROC curve")
	plt.xlim([-0.01, 1.02])
	plt.ylim([-0.01, 1.02])
	#Plot no skill
	plt.plot([0, 1], [0, 1], linestyle='--')
	plt.plot(fpr_points,tpr_points,'r-.')
	plt.ylabel("True positive rate")
	plt.xlabel("False positive rate")
	#plt.gca().invert_xaxis()#inver x axis so it makes sense

	plt.subplot(212)
	plt.title("PRC curve")
	plt.xlim([-0.01, 1.02])
	plt.ylim([-0.01, 1.02])
	# plot no skill
	plt.plot([0, 1], [0.5, 0.5], linestyle='--')
	plt.plot(tpr_points,ppv_points,'r-.')
	plt.ylabel("Positive predictive value")
	plt.xlabel("True positive rate")
	plt.show() 

def tpr_fpr_graph(tpr,fpr,title,note):
	plt.figure(title)
	plt.title("True positive rate vs False positive rate")
	x = [i for i in range(len(tpr))]
	height = [ (tpr[i])/fpr[i] if (fpr[i] != 0.0) else 0.0 for i in range(len(tpr))]
	plt.bar(x, height, align='center')
	plt.xticks(x, x)
	plt.ylabel('tpr/fpr')
	plt.annotate(note, (0,0), (0, -20), xycoords='axes fraction', textcoords='offset points', va='top')
	plt.show()


def get_ideal_threshold(tpr,fpr,fpr_max=0.011,tpr_min=0.7,fpr_exp=0.01):
	best = (None,0.0,0.0)#index,tpr,tpr/fpr
	for i in range(len(tpr)):
		if (fpr[i] == 0.0):
			fpr[i] = 0.0001#just to do calculations
		if ( (tpr[i] < tpr_min) or (fpr[i]>fpr_max)):
			continue
		if ((best[1] < tpr[i]) and (best[2] < (tpr[i]/(fpr[i]**fpr_exp)))):
			best = (i,tpr[i],(tpr[i]/(fpr[i]/fpr_exp)))
	best = (best[0],best[1],fpr[best[0]])#replace fpr index with fpr
	print(best)
	return best



# actual positives : - 351
# actual negatives : - 1059
# total :- 1410

# tpr_points_volume = [0.0, 0.9145299145299145, 0.8746438746438746, 0.8632478632478633, 0.8290598290598291, 0.8319088319088319, 0.8233618233618234, 0.8233618233618234, 0.8091168091168092, 0.8262108262108262, 0.8319088319088319, 0.8205128205128205, 0.8233618233618234, 0.8062678062678063, 0.8005698005698005]
# fpr_points = [0.0, 0.0226628895184136, 0.01794145420207743, 0.0169971671388102, 0.0169971671388102, 0.019830028328611898, 0.019830028328611898, 0.02077431539187913, 0.01794145420207743, 0.019830028328611898, 0.019830028328611898, 0.018885741265344664, 0.0169971671388102, 0.0169971671388102, 0.016052880075542966]
# ppv_points = [0.0, 0.9304347826086956, 0.941717791411043, 0.9439252336448598, 0.941747572815534, 0.9329073482428115, 0.932258064516129, 0.9292604501607717, 0.9372937293729373, 0.932475884244373, 0.9329073482428115, 0.935064935064935, 0.9413680781758957, 0.9401993355481728, 0.9429530201342282]

# 0-15,1 - normalize volume
# ------------------------------------------------------------------

tpr_points_volume = [0.0, 0.9145299145299145, 0.8746438746438746, 0.8632478632478633, 0.8290598290598291, 0.8319088319088319, 0.8233618233618234, 0.8233618233618234, 0.8091168091168092, 0.8262108262108262, 0.8319088319088319, 0.8205128205128205, 0.8233618233618234, 0.8062678062678063, 0.8005698005698005, 0.7578347578347578, 0.7264957264957265, 0.7065527065527065, 0.6723646723646723, 0.6438746438746439, 0.6381766381766382, 0.6267806267806267, 0.6296296296296297, 0.6267806267806267, 0.6153846153846154]

fpr_points_volume = [0.0, 0.0226628895184136, 0.01794145420207743, 0.0169971671388102, 0.0169971671388102, 0.019830028328611898, 0.019830028328611898, 0.02077431539187913, 0.01794145420207743, 0.019830028328611898, 0.019830028328611898, 0.018885741265344664, 0.0169971671388102, 0.0169971671388102, 0.016052880075542966, 0.019830028328611898, 0.0169971671388102, 0.01794145420207743, 0.015108593012275733, 0.016052880075542966, 0.01794145420207743, 0.015108593012275733, 0.015108593012275733, 0.014164305949008499, 0.013220018885741265]

#ppv_points_volume = [0.0, 0.9304347826086956, 0.941717791411043, 0.9439252336448598, 0.941747572815534, 0.9329073482428115, 0.932258064516129, 0.9292604501607717, 0.9372937293729373, 0.932475884244373, 0.9329073482428115, 0.935064935064935, 0.9413680781758957, 0.9401993355481728, 0.9429530201342282, 0.926829268292683, 0.9340659340659341, 0.9288389513108615, 0.9365079365079365, 0.9300411522633745, 0.9218106995884774, 0.9322033898305084, 0.9324894514767933, 0.9361702127659575, 0.9391304347826087]

tpr_points_volume[0] = 0.7521367521367521 #No normalization
fpr_points_volume[0] = 0.019830028328611898 #No normalization
#tpr_fpr_graph(tpr_points_volume,fpr_points_volume,"Volume Normalization",'Note : 0 point means no Normalization') 
# 0,25,1 normalize volume
# ------------------------------------------------------------------
tpr =  [0.1908831908831909, 0.20797720797720798, 0.22507122507122507, 0.245014245014245, 0.29914529914529914, 0.32193732193732194, 0.3475783475783476, 0.3903133903133903, 0.42165242165242167, 0.46438746438746437, 0.5042735042735043, 0.5327635327635327, 0.5584045584045584, 0.584045584045584, 0.6210826210826211, 0.6467236467236467, 0.6723646723646723, 0.7037037037037037, 0.7264957264957265, 0.7350427350427351, 0.7578347578347578, 0.7720797720797721, 0.7891737891737892, 0.7977207977207977, 0.8176638176638177, 0.8433048433048433, 0.8632478632478633, 0.8888888888888888, 0.9002849002849003, 0.9116809116809117, 0.9344729344729344, 0.9487179487179487, 0.9572649572649573, 0.9743589743589743, 0.9857549857549858, 0.9886039886039886, 0.9886039886039886, 0.9943019943019943, 0.9943019943019943, 0.9943019943019943, 0.9943019943019943]
fpr = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009442870632672333, 0.0009442870632672333, 0.0018885741265344666, 0.004721435316336166, 0.004721435316336166, 0.0056657223796034, 0.0056657223796034, 0.0066100094428706326, 0.0084985835694051, 0.010387157695939566, 0.013220018885741265, 0.0169971671388102, 0.019830028328611898, 0.025495750708215296, 0.02927289896128423, 0.03588290840415486, 0.044381491973559964, 0.05099150141643059, 0.05854579792256846, 0.06421152030217187, 0.07459867799811143, 0.08970727101038715, 0.10198300283286119, 0.12086874409820586, 0.14069877242681775, 0.16336166194523136, 0.19263456090651557, 0.21340887629839472, 0.23512747875354106]
ppv = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9949238578680203, 0.9951456310679612, 0.990909090909091, 0.978448275862069, 0.979253112033195, 0.9762845849802372, 0.9770114942528736, 0.9735849056603774, 0.9672727272727273, 0.9609929078014184, 0.9518900343642611, 0.9395973154362416, 0.9318181818181818, 0.9164086687306502, 0.907185628742515, 0.8914285714285715, 0.8705234159779615, 0.8556149732620321, 0.841025641025641, 0.830423940149626, 0.8096385542168675, 0.782608695652174, 0.762114537444934, 0.7305263157894737, 0.6995967741935484, 0.6685823754789272, 0.6311030741410488, 0.6069565217391304, 0.5836120401337793]

print(max(fpr))
get_ideal_threshold(tpr,fpr,tpr_min=0.70,fpr_max=0.015,fpr_exp=0.001)#max false positive rate 1.5%, min true positive rate 70%, false positives rate increase less important than true positives by 10x
ROC_PRC(ppv,tpr,fpr,"threshold 'help me'")
#1e-0,1e-40,1 threshold "help me"
# ------------------------------------------------------------------